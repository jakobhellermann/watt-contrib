static MACRO: watt::WasmMacro = watt::WasmMacro::new(WASM);
static WASM: &[u8] = include_bytes!("num-derive.wasm");
#[doc = " Derives [`num_traits::FromPrimitive`][from] for simple enums and newtypes."]
#[doc = ""]
#[doc = " [from]: https://docs.rs/num-traits/0.2/num_traits/cast/trait.FromPrimitive.html"]
#[doc = ""]
#[doc = " # Examples"]
#[doc = ""]
#[doc = " Simple enums can be derived:"]
#[doc = ""]
#[doc = " ```rust"]
#[doc = " # #[macro_use]"]
#[doc = " # extern crate num_derive;"]
#[doc = ""]
#[doc = " #[derive(FromPrimitive)]"]
#[doc = " enum Color {"]
#[doc = "     Red,"]
#[doc = "     Blue,"]
#[doc = "     Green = 42,"]
#[doc = " }"]
#[doc = " # fn main() {}"]
#[doc = " ```"]
#[doc = ""]
#[doc = " Enums that contain data are not allowed:"]
#[doc = ""]
#[doc = " ```compile_fail"]
#[doc = " # #[macro_use]"]
#[doc = " # extern crate num_derive;"]
#[doc = ""]
#[doc = " #[derive(FromPrimitive)]"]
#[doc = " enum Color {"]
#[doc = "     Rgb(u8, u8, u8),"]
#[doc = "     Hsv(u8, u8, u8),"]
#[doc = " }"]
#[doc = " # fn main() {}"]
#[doc = " ```"]
#[doc = ""]
#[doc = " Structs are not allowed:"]
#[doc = ""]
#[doc = " ```compile_fail"]
#[doc = " # #[macro_use]"]
#[doc = " # extern crate num_derive;"]
#[doc = " #[derive(FromPrimitive)]"]
#[doc = " struct Color {"]
#[doc = "     r: u8,"]
#[doc = "     g: u8,"]
#[doc = "     b: u8,"]
#[doc = " }"]
#[doc = " # fn main() {}"]
#[doc = " ```"]
#[proc_macro_derive(FromPrimitive)]
pub fn from_primitive(input: proc_macro::TokenStream) -> proc_macro::TokenStream {
    MACRO.proc_macro_derive(stringify!(from_primitive), input)
}
#[doc = " Derives [`num_traits::ToPrimitive`][to] for simple enums and newtypes."]
#[doc = ""]
#[doc = " [to]: https://docs.rs/num-traits/0.2/num_traits/cast/trait.ToPrimitive.html"]
#[doc = ""]
#[doc = " # Examples"]
#[doc = ""]
#[doc = " Simple enums can be derived:"]
#[doc = ""]
#[doc = " ```rust"]
#[doc = " # #[macro_use]"]
#[doc = " # extern crate num_derive;"]
#[doc = ""]
#[doc = " #[derive(ToPrimitive)]"]
#[doc = " enum Color {"]
#[doc = "     Red,"]
#[doc = "     Blue,"]
#[doc = "     Green = 42,"]
#[doc = " }"]
#[doc = " # fn main() {}"]
#[doc = " ```"]
#[doc = ""]
#[doc = " Enums that contain data are not allowed:"]
#[doc = ""]
#[doc = " ```compile_fail"]
#[doc = " # #[macro_use]"]
#[doc = " # extern crate num_derive;"]
#[doc = ""]
#[doc = " #[derive(ToPrimitive)]"]
#[doc = " enum Color {"]
#[doc = "     Rgb(u8, u8, u8),"]
#[doc = "     Hsv(u8, u8, u8),"]
#[doc = " }"]
#[doc = " # fn main() {}"]
#[doc = " ```"]
#[doc = ""]
#[doc = " Structs are not allowed:"]
#[doc = ""]
#[doc = " ```compile_fail"]
#[doc = " # #[macro_use]"]
#[doc = " # extern crate num_derive;"]
#[doc = " #[derive(ToPrimitive)]"]
#[doc = " struct Color {"]
#[doc = "     r: u8,"]
#[doc = "     g: u8,"]
#[doc = "     b: u8,"]
#[doc = " }"]
#[doc = " # fn main() {}"]
#[doc = " ```"]
#[proc_macro_derive(ToPrimitive)]
pub fn to_primitive(input: proc_macro::TokenStream) -> proc_macro::TokenStream {
    MACRO.proc_macro_derive(stringify!(to_primitive), input)
}
#[doc = " Derives [`num_traits::NumOps`][num_ops] for newtypes.  The inner type must already implement"]
#[doc = " `NumOps`."]
#[doc = ""]
#[doc = " [num_ops]: https://docs.rs/num-traits/0.2/num_traits/trait.NumOps.html"]
#[doc = ""]
#[doc = " Note that, since `NumOps` is really a trait alias for `Add + Sub + Mul + Div + Rem`, this macro"]
#[doc = " generates impls for _those_ traits.  Furthermore, in all generated impls, `RHS=Self` and"]
#[doc = " `Output=Self`."]
#[proc_macro_derive(NumOps)]
pub fn num_ops(input: proc_macro::TokenStream) -> proc_macro::TokenStream {
    MACRO.proc_macro_derive(stringify!(num_ops), input)
}
#[doc = " Derives [`num_traits::NumCast`][num_cast] for newtypes.  The inner type must already implement"]
#[doc = " `NumCast`."]
#[doc = ""]
#[doc = " [num_cast]: https://docs.rs/num-traits/0.2/num_traits/cast/trait.NumCast.html"]
#[proc_macro_derive(NumCast)]
pub fn num_cast(input: proc_macro::TokenStream) -> proc_macro::TokenStream {
    MACRO.proc_macro_derive(stringify!(num_cast), input)
}
#[doc = " Derives [`num_traits::Zero`][zero] for newtypes.  The inner type must already implement `Zero`."]
#[doc = ""]
#[doc = " [zero]: https://docs.rs/num-traits/0.2/num_traits/identities/trait.Zero.html"]
#[proc_macro_derive(Zero)]
pub fn zero(input: proc_macro::TokenStream) -> proc_macro::TokenStream {
    MACRO.proc_macro_derive(stringify!(zero), input)
}
#[doc = " Derives [`num_traits::One`][one] for newtypes.  The inner type must already implement `One`."]
#[doc = ""]
#[doc = " [one]: https://docs.rs/num-traits/0.2/num_traits/identities/trait.One.html"]
#[proc_macro_derive(One)]
pub fn one(input: proc_macro::TokenStream) -> proc_macro::TokenStream {
    MACRO.proc_macro_derive(stringify!(one), input)
}
#[doc = " Derives [`num_traits::Num`][num] for newtypes.  The inner type must already implement `Num`."]
#[doc = ""]
#[doc = " [num]: https://docs.rs/num-traits/0.2/num_traits/trait.Num.html"]
#[proc_macro_derive(Num)]
pub fn num(input: proc_macro::TokenStream) -> proc_macro::TokenStream {
    MACRO.proc_macro_derive(stringify!(num), input)
}
#[doc = " Derives [`num_traits::Float`][float] for newtypes.  The inner type must already implement"]
#[doc = " `Float`."]
#[doc = ""]
#[doc = " [float]: https://docs.rs/num-traits/0.2/num_traits/float/trait.Float.html"]
#[proc_macro_derive(Float)]
pub fn float(input: proc_macro::TokenStream) -> proc_macro::TokenStream {
    MACRO.proc_macro_derive(stringify!(float), input)
}
